FROM fedora:latest

# The OpenSSL version to use. We parameterize this because many Rust
# projects will fail to build with 1.1.
ARG OPENSSL_VERSION=1.1.1q

ARG ZLIB_VERSION=1.2.12

ARG MOLD_VERSION=1.5.1
ARG MDBOOK_VERSION=0.4.21

ARG LIBGIT2_VERSION=0.28.3

# Make sure we have basic dev tools for building C libraries.  Our goal
# here is to support the musl-libc builds and Cargo builds needed for a
# large selection of the most popular crates.
#
# We also set up a `sirmergealot` user by default, in whose account we'll install
# the Rust toolchain.  This user has sudo privileges if you need to install
# any more software.
#
# `mdbook` is the standard Rust tool for making searchable HTML manuals.
RUN dnf update -y && \
    dnf install -y \
        gcc clang clang-devel llvm \
        cmake \
        curl \
        file \
        git \
        glibc-devel \
        hunspell hunspell-devel \
        pkgconf \
        sudo \
        make \
        cmake \
        xz xz-static xz-devel \
        zlib zlib-devel zlib-static \
        snappy snappy-devel \
        zstd libzstd-devel libzstd-static \
        bzip2 bzip2-devel bzip2-static \
        lz4 lz4-libs lz4-devel lz4-static \
        libseccomp-static libseccomp libseccomp-devel \
        mingw64-winpthreads-static mingw64-gcc mingw64-gcc-c++ \
        sd ripgrep fd-find \
        protobuf-static protobuf protobuf-compiler \
        capnproto-devel capnproto capnproto-libs \
        rocksdb rocksdb-devel \
        && \
    dnf clean all && rm -rf /var/cache/*

RUN  useradd sirmergealot --user-group --create-home --shell /bin/bash --groups wheel

RUN \
    curl -LO https://github.com/rust-lang-nursery/mdBook/releases/download/v$MDBOOK_VERSION/mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-gnu.tar.gz && \
    tar xf mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-gnu.tar.gz && \
    mv mdbook /usr/local/bin/ && \
    rm -f mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-gnu.tar.gz

# Allow sudo without a password.
RUN echo "%wheel    ALL=(ALL)   NOPASSWD: ALL" >  /etc/sudoers.d/nopasswd

# Run all further code as user `rust`, and create our working directories
# as the appropriate user.
USER sirmergealot
RUN mkdir -p /home/sirmergealot/libs /home/sirmergealot/src

# Set up our path with all our binary directories, including those for the
# musl-gcc toolchain and for our Rust toolchain.
ENV PATH=/home/sirmergealot/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Install our Rust toolchain and the `musl` target.  We patch the
# command-line we pass to the installer so that it won't attempt to
# interact with the user or fool around with TTYs.  We also set the default
# `--target` to musl so that our users don't need to keep overriding it
# manually.
RUN curl https://sh.rustup.rs -sSf | \
    sh -s -- -y --default-toolchain stable
RUN rustup toolchain add nightly beta
RUN rustup component add clippy
RUN rustup component add rustfmt
RUN rustup +stable target add x86_64-pc-windows-gnu
RUN rustup +beta target add x86_64-pc-windows-gnu
RUN rustup +nightly target add x86_64-pc-windows-gnu
RUN rustup +stable target add wasm32-unknown-unknown
RUN rustup +beta target add wasm32-unknown-unknown
RUN rustup +nightly target add wasm32-unknown-unknown

RUN sudo ln -s /usr/local/lib64 /usr/local/lib
# Build a static library version of OpenSSL using musl-libc.  This is needed by
# the popular Rust `hyper` crate.
#
# We point /usr/local/include/linux at some Linux kernel headers (not
# necessarily the right ones) in an effort to compile OpenSSL 1.1's "engine"
# component. It's possible that this will cause bizarre and terrible things to
# happen. There may be "sanitized" header

USER root
RUN dnf update -y && \
    dnf install -y \
        perl \
        perl-FindBin \
        perl-File-Compare \
        perl-Test-More-UTF8 \
        perl-Text-Template \
        && \
    dnf clean all && rm -rf /var/cache/*

# install mold first, so it's picked up by all compillations passes following?
RUN echo "Installing mold" && cd /tmp && \
curl -L "https://github.com/rui314/mold/releases/download/v${MOLD_VERSION}/mold-${MOLD_VERSION}-x86_64-linux.tar.gz" | tar xvz && \
cp "/tmp/mold-${MOLD_VERSION}-x86_64-linux/bin/"* /usr/local/bin/ && \
chmod +x /usr/local/bin/*

USER sirmergealot

RUN echo "Building OpenSSL" && \
    ls /usr/include/linux && \
    cd /tmp && \
    curl -L -o - "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz" | tar xvzf - && \
    cd "openssl-$OPENSSL_VERSION" && \
    ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/ -DOPENSSL_NO_SECURE_MEMORY linux-x86_64 && \
    make depend && \
    make && \
    sudo make install && \
    sudo rm -r /tmp/* && \
    echo "Compiling libs openssl/ssl/crypto complete!\n\n"

RUN echo "Building zlib" && \
    cd /tmp && \
    curl -L -o - "http://zlib.net/zlib-$ZLIB_VERSION.tar.xz" | tar xJf - && \
    cd "zlib-$ZLIB_VERSION" && \
    ./configure --static --prefix=/usr/local/ && \
    make && \
    sudo make install && \
    sudo rm -r /tmp/* && \
    echo "Compiling zlib complete!\n\n"

RUN echo "Building libgit" && \
    cd /tmp && \
    curl -L -o - "https://github.com/libgit2/libgit2/archive/v${LIBGIT2_VERSION}.tar.gz" | tar xzf - && \
    cd "./libgit2-${LIBGIT2_VERSION}/" && \
    mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_CLAR=OFF -DCMAKE_INSTALL_PREFIX=/usr/local/ .. && \
    sudo cmake --build . --target install && \
    echo "Compiling libgit complete!\n\n"

ENV OPENSSL_DIR=/usr/local/ \
    OPENSSL_INCLUDE_DIR=/usr/local/include/ \
    DEP_OPENSSL_INCLUDE=/usr/local/include/ \
    OPENSSL_LIB_DIR=/usr/local/lib64/ \
    OPENSSL_STATIC=1 \
    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_GNU=1 \
    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=/usr/bin/pg_config \
    PKG_CONFIG_ALLOW_CROSS=true \
    PKG_CONFIG_ALL_STATIC=true \
    PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig/ \
    LIBZ_SYS_STATIC=1

# https://github.com/drahnr/rocksdb-rpm-specfile/
# TODO ROCKSDB static is still missing, setting it to _any_ value implies static linkage
ENV \
    ROCKSDB_LIB_DIR=/usr/lib64 \
    ZLIB_LIB_DIR=/usr/lib64 \
    ZLIB_STATIC=true \
    ZSTD_LIB_DIR=/usr/lib64 \
    ZSTD_STATIC=true \
    LZ4_LIB_DIR=/usr/lib64 \
    LZ4_STATIC=true \
    BZIP2_LIB_DIR=/usr/lib64 \
    BZIP2_STATIC=true \
    BZ2_LIB_DIR=/usr/lib64 \
    BZ2_STATIC=true \
    SNAPPY_LIB_DIR=/usr/lib64

# (Please feel free to submit pull requests for musl-libc builds of other C
# libraries needed by the most popular and common Rust crates, to avoid
# everybody needing to build them manually.)

# Install some useful Rust tools from source. This will use the static linking
# toolchain, but that should be OK.
RUN cargo install -f cargo-spellcheck && \
	 cargo install -f cargo-audit && \
	 cargo install -f cargo-license && \
	 cargo install -f cargo-semver-checks && \
	 cargo install --bin taplo --git https://github.com/drahnr/taplo.git taplo-cli && \
	 rm -rf /home/sirmergealot/.cargo/registry/

# Expect our source code to live in /home/sirmergealot/src.  We'll run the build as
# user `sirmergealot`, which will be uid 1000, gid 1000 outside the container.
WORKDIR /home/sirmergealot/src
